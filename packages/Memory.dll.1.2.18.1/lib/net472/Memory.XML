<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Memory</name>
    </assembly>
    <members>
        <member name="T:Memory.Mem">
            <summary>
            Memory.dll class. Full documentation at https://github.com/erfg12/memory.dll/wiki
            </summary>
        </member>
        <member name="F:Memory.Mem.pHandle">
            <summary>
            The process handle that was opened. (Use OpenProcess function to populate this variable)
            </summary>
        </member>
        <member name="M:Memory.Mem.OpenProcess(System.Int32)">
            <summary>
            Open the PC game process with all security and access rights.
            </summary>
            <param name="proc">Use process name or process ID here.</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.OpenProcess(System.String)">
            <summary>
            Open the PC game process with all security and access rights.
            </summary>
            <param name="proc">Use process name or process ID here.</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.isAdmin">
            <summary>
            Check if program is running with administrative privileges. Read about it here: https://github.com/erfg12/memory.dll/wiki/Administrative-Privileges
            </summary>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.is64bit">
            <summary>
            Check if opened process is 64bit. Used primarily for getCode().
            </summary>
            <returns>True if 64bit false if 32bit.</returns>
        </member>
        <member name="M:Memory.Mem.getModules">
            <summary>
            Builds the process modules dictionary (names with addresses).
            </summary>
        </member>
        <member name="M:Memory.Mem.getProcIDFromName(System.String)">
            <summary>
            Get the process ID number by process name.
            </summary>
            <param name="name">Example: "eqgame". Use task manager to find the name. Do not include .exe</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.byteArrayToString(System.Byte[])">
            <summary>
            Convert a byte array to a literal string
            </summary>
            <param name="buffer">Byte array to convert to byte string</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.LoadCode(System.String,System.String)">
            <summary>
            Get code from ini file.
            </summary>
            <param name="name">label for address or code</param>
            <param name="file">path and name of ini file</param>
            <returns></returns>
        </member>
        <member name="F:Memory.Mem.modules">
            <summary>
            Dictionary with our opened process module names with addresses.
            </summary>
        </member>
        <member name="M:Memory.Mem.ThreadStartClient(System.String,System.String)">
            <summary>
            Make a named pipe (if not already made) and call to a remote function.
            </summary>
            <param name="func">remote function to call</param>
            <param name="name">name of the thread</param>
        </member>
        <member name="M:Memory.Mem.CutString(System.String)">
            <summary>
            Cut a string that goes on for too long or one that is possibly merged with another string.
            </summary>
            <param name="str">The string you want to cut.</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.sanitizeString(System.String)">
            <summary>
            Clean up a string that has bad characters in it.
            </summary>
            <param name="str">The string you want to sanitize.</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readBytes(System.String,System.Int64,System.String)">
            <summary>
            Reads up to `length ` bytes from an address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="length">The maximum bytes to read.</param>
            <param name="file">path and name of ini file.</param>
            <returns>The bytes read or null</returns>
        </member>
        <member name="M:Memory.Mem.readFloat(System.String,System.String,System.Boolean)">
            <summary>
            Read a float value from an address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <param name="round">Round the value to 2 decimal places</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readString(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Read a string value from an address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <param name="length">length of bytes to read (OPTIONAL)</param>
            <param name="zeroTerminated">terminate string at null char</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readDouble(System.String,System.String,System.Boolean)">
            <summary>
            Read a double value
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <param name="round">Round the value to 2 decimal places</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readInt(System.String,System.String)">
            <summary>
            Read an integer from an address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readLong(System.String,System.String)">
            <summary>
            Read a long value from an address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readUInt(System.String,System.String)">
            <summary>
            Read a UInt value from address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.read2ByteMove(System.String,System.Int32,System.String)">
            <summary>
            Reads a 2 byte value from an address and moves the address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="moveQty">Quantity to move.</param>
            <param name="file">path and name of ini file (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readIntMove(System.String,System.Int32,System.String)">
            <summary>
            Reads an integer value from address and moves the address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="moveQty">Quantity to move.</param>
            <param name="file">path and name of ini file (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readUIntMove(System.String,System.Int32,System.String)">
            <summary>
            Get UInt and move to another address by moveQty. Use in a for loop.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="moveQty">Quantity to move.</param>
            <param name="file">path and name of ini file (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.read2Byte(System.String,System.String)">
            <summary>
            Read a 2 byte value from an address. Returns an integer.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and file name to ini file. (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.readByte(System.String,System.String)">
            <summary>
            Read 1 byte from address.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="file">path and file name of ini file. (OPTIONAL)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.writeMemory(System.String,System.String,System.String,System.String)">
            <summary>
            Write to memory address. See https://github.com/erfg12/memory.dll/wiki/writeMemory() for more information.
            </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="type">byte, 2bytes, bytes, float, int, string, double or long.</param>
            <param name="write">value to write to address.</param>
            <param name="file">path and name of .ini file (OPTIONAL)</param>
        </member>
        <member name="M:Memory.Mem.writeMove(System.String,System.String,System.String,System.Int32,System.String)">
             <summary>
             Write to address and move by moveQty. Good for byte arrays. See https://github.com/erfg12/memory.dll/wiki/Writing-a-Byte-Array for more information.
             </summary>
            <param name="code">address, module + pointer + offset, module + offset OR label in .ini file.</param>
            <param name="type">byte, bytes, float, int, string or long.</param>
             <param name="write">byte to write</param>
             <param name="moveQty">quantity to move</param>
             <param name="file">path and name of .ini file (OPTIONAL)</param>
             <returns></returns>
        </member>
        <member name="M:Memory.Mem.writeBytes(System.String,System.Byte[],System.String)">
            <summary>
            Write byte array to addresses.
            </summary>
            <param name="code">address to write to</param>
            <param name="write">byte array to write</param>
            <param name="file">path and name of ini file. (OPTIONAL)</param>
        </member>
        <member name="M:Memory.Mem.writeBytes(System.UIntPtr,System.Byte[])">
            <summary>
            Write byte array to address
            </summary>
            <param name="address">Address to write to</param>
            <param name="write">Byte array to write to</param>
        </member>
        <member name="M:Memory.Mem.getCode(System.String,System.String,System.Int32)">
            <summary>
            Convert code from string to real address. If path is not blank, will pull from ini file.
            </summary>
            <param name="name">label in ini file or code</param>
            <param name="path">path to ini file (OPTIONAL)</param>
            <param name="size">size of address (default is 8)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.get64bitCode(System.String,System.String,System.Int32)">
            <summary>
            Convert code from string to real address. If path is not blank, will pull from ini file.
            </summary>
            <param name="name">label in ini file OR code</param>
            <param name="path">path to ini file (OPTIONAL)</param>
            <param name="size">size of address (default is 16)</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.closeProcess">
            <summary>
            Close the process when finished.
            </summary>
        </member>
        <member name="M:Memory.Mem.InjectDLL(System.String)">
            <summary>
            Inject a DLL file.
            </summary>
            <param name="strDLLName">path and name of DLL file.</param>
        </member>
        <member name="M:Memory.Mem.CreateCodeCave(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Creates a code cave to write custom opcodes in target process
            </summary>
            <param name="code">Address to create the trampoline</param>
            <param name="newBytes">The opcodes to write in the code cave</param>
            <param name="replaceCount">The number of bytes being replaced</param>
            <param name="size">size of the allocated region</param>
            <param name="file">ini file to look in</param>
            <remarks>Please ensure that you use the proper replaceCount
            if you replace halfway in an instruction you may cause bad things</remarks>
            <returns>UIntPtr to created code cave for use for later deallocation</returns>
        </member>
        <member name="M:Memory.Mem.ByteArrayToHexString(System.Byte[])">
            <summary>
            Convert a byte array to hex values in a string.
            </summary>
            <param name="ba">your byte array to convert</param>
            <returns></returns>
        </member>
        <member name="M:Memory.Mem.DumpMemory(System.String)">
            <summary>
            Dump memory page by page to a dump.dmp file. Can be used with Cheat Engine.
            </summary>
        </member>
        <member name="M:Memory.Mem.AoBScan(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Array of byte scan.
            </summary>
            <param name="search">array of bytes to search for, OR your ini code label.</param>
            <param name="writable">Include writable addresses in scan</param>
            <param name="executable">Include executable addresses in scan</param>
            <param name="file">ini file (OPTIONAL)</param>
            <returns>IEnumerable of all addresses found.</returns>
        </member>
        <member name="M:Memory.Mem.AoBScan(System.Int64,System.Int64,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Array of Byte scan.
            </summary>
            <param name="start">Your starting address.</param>
            <param name="end">ending address</param>
            <param name="search">array of bytes to search for, OR your ini code label.</param>
            <param name="file">ini file (OPTIONAL)</param>
            <param name="writable">Include writable addresses in scan</param>
            <param name="executable">Include executable addresses in scan</param>
            <returns>IEnumerable of all addresses found.</returns>
        </member>
        <member name="M:Memory.Mem.AoBScan(System.String,System.Int64,System.String,System.String)">
            <summary>
            Array of bytes scan
            </summary>
            <param name="code">Starting address or ini label</param>
            <param name="end">ending address</param>
            <param name="search">array of bytes to search for or your ini code label</param>
            <param name="file">ini file</param>
            <returns>First address found</returns>
        </member>
    </members>
</doc>
